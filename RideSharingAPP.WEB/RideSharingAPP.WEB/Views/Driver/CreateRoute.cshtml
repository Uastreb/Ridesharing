@{
    Layout = "~/Views/Shared/_LayoutDriver.cshtml";
    ViewBag.Title = "CreateRoute";
}
@model RideSharingAPP.WEB.Models.Driver.TripViewModel

<head>
    <meta charset='utf-8' />
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <script src='https://api.mapbox.com/mapbox-gl-js/v1.3.2/mapbox-gl.js'></script>
    <link href='https://api.mapbox.com/mapbox-gl-js/v1.3.2/mapbox-gl.css' rel='stylesheet' />
    <script src='https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js'></script>
    <link href="~/Content/Driver(TripCreate)/CustomStylesDriver(CreateRoute).css" rel="stylesheet" />

</head>
<body>

    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.4.0/mapbox-gl.js'></script>
    <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.4.0/mapbox-gl.css' rel='stylesheet' />
    <script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.1/mapbox-gl-geocoder.min.js'></script>
    <link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.1/mapbox-gl-geocoder.css' type='text/css' />
    <script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.0.2/mapbox-gl-directions.js'></script>
    <link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.0.2/mapbox-gl-directions.css' type='text/css' />
    <link rel="canonical" href="https://labs.mapbox.com/bites/00321/">
    <script src="https://d3js.org/d3-queue.v3.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/places.js@1.16.4"></script>
    <div class="wrapper">
        <div class="left_block">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="tab">
                        @Html.Label("Выберите точку отправки", new { @value = "", @id = "startPoint" })
                        @Html.Editor("coordinatesStarts", new { htmlAttributes = new { @class = "textboxSearch", type = "search", id = "address-input", placeholder = "Введите адрес", onchange = "getRoute();" } })
                        @Html.Hidden("Points[0].OriginCoordinates", null, new { id = "point1" })
                        @Html.Label("Выберите конечную точку/точку остановки", new { @value = "", @id = "finishPoint", @class = "labelEndPoint" })
                        @Html.Editor("addressEnd", new { htmlAttributes = new { @class = "textboxSearch", type = "search", id = "address-input1", placeholder = "Введите адрес", onchange = "getRoute();" } })
                        @Html.Hidden("Points[0].EndCoordinates", null, new { id = "point2" })
                        <div class="left_calendar">
                            @Html.Label("Отправление:")
                            @Html.Editor("Points[0].DateAndTimeOfDepartue", new { htmlAttributes = new { @class = "form-control calendar", type = "datetime-local" } })
                        </div>
                        <div class="left_calendar">
                            @Html.Label("Прибытие:")
                            @Html.Editor("Points[0].DateAndTimeOfArrival", new { htmlAttributes = new { @class = "form-control calendar", type = "datetime-local" } })
                        </div>
                        <div class="right_calendar">
                            @Html.Label("Cтоимость")
                            @Html.Editor("Points[0].Cost", new { htmlAttributes = new { @class = "form-control costStyle" } })
                        </div>
                        <div id="waypointContent" class="waypointContent"> </div>
                        <input type="button" value="Добавить точку" class="paddingTop buttonPadding btn btn-default" onclick='addElem();' />
                    </div>
                    <div class="tab">
                        <div class="calendarEndDateOfRegistration">
                            @Html.Label("Дата окончания регистрации на маршрут:")
                            @Html.EditorFor(model => model.RegistrationEndDate, new { htmlAttributes = new { @class = "form-control", type = "datetime-local" } })
                        </div>
                        <div class="calendarEndDateOfRegistration">
                            @Html.Label("Автомобиль:")
                            @*@Html.DropDownList("idCar", ViewData["idCar"] as SelectList, htmlAttributes: new { @class = "form-control" })*@
                            @Html.DropDownListFor(m => m.CarId, Model.ListCars, htmlAttributes: new { @class = "form-control" })
                        </div>
                        <div class="calendarEndDateOfRegistration">
                            @Html.Label("Количество мест:")
                            @Html.EditorFor(model => model.NumberOfSeats, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>

                    <div>

                    </div>

                    <div class="form-group overflow:auto;">
                        <div>
                            <button type="button" id="prevBtn" class="btn btn-default leftbuttoncontroll" onclick="nextPrev(-1)">Назад</button>
                            <button type="button" id="nextBtn" class="btn btn-default rigftbuttoncontroll" onclick="nextPrev(1)">Далее</button>
                            <input type="submit" value="Ввод" class="btn btn-default sumbbuttoncontroll" id="sumbitBut" />
                        </div>
                    </div>
                    }
                </div>

                <div class="right_block">
                    <div id="map"></div>
                </div>
            </div>
        

    <script>
                var start;
                var end;
                let waypoints = [];

                (function () {
                    var placesAutocomplete = places({
                        appId: 'plI6T90SY476',
                        apiKey: 'e7e9bed37c9bc906cfe8f5d15f03b745',
                        container: document.querySelector('#address-input')
                    });


                    var $address = document.querySelector('#address-input')
                    placesAutocomplete.on('change', function (e) {
                        start = [e.suggestion.latlng.lng, e.suggestion.latlng.lat];
                        document.getElementById('point1').value = start;
                        getRoute();
                    });

                    placesAutocomplete.on('clear', function () {
                        $address.textContent = 'none';
                    });

                })();

                document.getElementById('address-input').addEventListener('change', function () {
                    map.flyTo({
                        center: start,
                        zoom: 12.5
                    });
                });


                (function () {
                    var placesAutocomplete = places({
                        appId: 'plI6T90SY476',
                        apiKey: 'e7e9bed37c9bc906cfe8f5d15f03b745',
                        container: document.querySelector('#address-input1')
                    });


                    var $address = document.querySelector('#address-input1')
                    placesAutocomplete.on('change', function (e) {
                        end = [e.suggestion.latlng.lng, e.suggestion.latlng.lat];
                        document.getElementById('point2').value = end;
                        getRoute();
                    });

                    placesAutocomplete.on('clear', function () {
                        $address.textContent = 'none';
                    });
                })();

                document.getElementById('address-input1').addEventListener('change', function () {
                    map.flyTo({
                        center: end,
                        zoom: 12.5
                    });
                });



                // -------------------------------------------------------------------------------------------------------------------------------------------------------------



                var pointX = 27.948;
                var pointY = 53.663;
                var pointZoom = 5.25;
                mapboxgl.accessToken = 'pk.eyJ1IjoidWFzdHJlYiIsImEiOiJjazExcWJ0NW4waHc4M25wNmI1aXIwcWRnIn0.HfABZtci9yWVEfd_20QCWQ';
                var map = new mapboxgl.Map({
                    container: 'map',
                    style: 'mapbox://styles/mapbox/streets-v11',
                    center: [pointX, pointY],
                    zoom: pointZoom,
                    hash: true
                });


                map.addControl(new mapboxgl.NavigationControl());




                var api = 'https://api.mapbox.com/directions/v5/';
                var profiles = {
                    driving: {
                        color: '#3bb2d0'
                    }
                };


            function getRoute() {
                if (start != null && end != null) {
                    clearMap();
                    go();
                }
            }

            function go() {

                if (!map.getSource('start')) {
                    map.addSource('start', {
                        type: 'geojson',
                        data: {
                            type: 'Point',
                            coordinates: [start[0], start[1]]
                        }
                    });

                    map.addLayer({
                        'id': 'start',
                        'type': 'circle',
                        'source': 'start',
                        'layout': {},
                        'paint': {
                            'circle-radius': 10,
                            'circle-color': profiles.driving.color
                        }
                    });
                }

                if (end === start) {
                    end = null;
                    return
                }

                map.addSource('end', {
                    type: 'geojson',
                    data: {
                        type: 'Point',
                        coordinates: [end[0], end[1]]
                    }
                });
                map.addLayer({
                    'id': 'end',
                    'type': 'circle',
                    'source': 'end',
                    'layout': {},
                    'paint': {
                        'circle-radius': 10,
                        'circle-color': profiles.driving.color
                    }
                });

                waypoints.forEach(function (item) {
                    map.addSource(item.name, {
                        type: 'geojson',
                        data: {
                            type: 'Point',
                            coordinates: item.coordinates
                        }
                    });

                    map.addLayer({
                        'id': item.name,
                        'type': 'circle',
                        'source': item.name,
                        'layout': {},
                        'paint': {
                            'circle-radius': 10,
                            'circle-color': profiles.driving.color
                        }
                    });
                });


                if (start && end) requestProfiles(start, end, Object.keys(profiles));
            }

            function requestProfiles() {
                var queue = d3.queue();

                Object.keys(profiles).forEach(function (profile) {
                    queue.defer(route, start, end, profile);
                });

                queue.awaitAll(function (error, results) {
                    results.forEach(function (result) {
                        if (result && result.profile) {
                            profiles[result.profile].route = result.routes[0];
                        }
                    })
                    draw();
                });

                function route(start, end, profile, cb) {
                    var startEnd = encodeURIComponent(start + ';' + end);
                    waypoints.forEach(function (item) {
                        startEnd += ';' + item.coordinates;
                    });
                    var request = new XMLHttpRequest();
                    var url = api + 'mapbox/' + profile + '/' + startEnd + '.json?access_token=pk.eyJ1IjoiYWFyb25saWRtYW4iLCJhIjoiNTVucTd0TSJ9.wVh5WkYXWJSBgwnScLupiQ&geometries=geojson&overview=full';

                    request.abort();
                    request.open('GET', url, true);
                    request.send();

                    request.onload = function () {
                        if (request.status >= 200 && request.status < 400) {
                            var data = JSON.parse(request.responseText);
                            if (data.error) {
                                console.log('error');
                                return clear();
                            }
                            data.profile = profile;
                            return cb(null, data);
                        } else {
                            // never actually error
                            return cb(null, false);
                        }
                    };

                    request.onerror = function () {
                        return cb(null, false);
                    };
                }
            }

            function draw() {
                var bounds = new mapboxgl.LngLatBounds(start, end);

                Object.keys(profiles).forEach(function (profile, idx) {
                    map.addSource(profile + ' route', {
                        type: 'geojson',
                        data: profiles[profile].route.geometry
                    });
                    var route = {
                        'id': profile + ' route',
                        'type': 'line',
                        'source': profile + ' route',
                        'layout': {
                            'line-join': 'round',
                            'line-cap': 'round'
                        },
                        'paint': {
                            'line-color': profiles[profile].color,
                            'line-width': 4,
                            'line-opacity': 1
                        }
                    };
                    map.addLayer(route, 'start');

                    var result = profiles[profile].route.geometry.coordinates.reduce(function (previous, current) {
                        return bounds.extend(current);
                    });
                });

                map.fitBounds(bounds, {
                    padding: 100
                });
            }

            function clearMap() {
                Object.keys(profiles).forEach(function (profile) {
                    if (map.getLayer(profile + ' route')) map.removeLayer(profile + ' route');
                    if (map.getSource(profile + ' route')) map.removeSource(profile + ' route');
                });

                ['start', 'end'].forEach(function (item) {
                    if (map.getLayer(item)) map.removeLayer(item);
                    if (map.getSource(item)) map.removeSource(item);
                });
                waypoints.forEach(function (item) {
                    if (map.getLayer(item.name)) map.removeLayer(item.name);
                    if (map.getSource(item.name)) map.removeSource(item.name);
                });
                }


                var check = true;
            var pointsCount = 2;
            var waypointCount = 1;
                function addElem() {
                    if (check != false) {
                        check = false;
                        if (document.getElementById('point' + pointsCount).value != null || document.getElementById('point' + pointsCount).value != "") {


                            var waypoint = "Waypoint" + waypointCount;
                            var html = '@Html.Label("Выберите конечную точку/точку остановки", new { @class = "labelEndPoint" }) <input name="waypointAddress" class = "textboxSearch" type = "search" id = "' + waypoint + '" placeholder = "Введите адрес" /> <div class="left_calendar" > @Html.Label("Отправление:")<input type = "datetime-local" class="form-control calendar" name = "Points[' + waypointCount + '].DateAndTimeOfDepartue"/></div > <div class="left_calendar"> @Html.Label("Прибытие:") <input type = "datetime-local" class="form-control calendar" name = "Points[' + waypointCount + '].DateAndTimeOfArrival"/> </div> <div class="right_calendar"> @Html.Label("Cтоимость")<input class ="form-control costStyle" name ="Points[' + waypointCount + '].Cost"/></div > ';

                            var htmlHidden1 = '<input type="hidden" value="" name="Points[' + waypointCount + '].OriginCoordinates" id="point' + (pointsCount + 1) + '" />';
                            var htmlHidden2 = '<input type="hidden" value="" name="Points[' + waypointCount + '].EndCoordinates" id="point' + (pointsCount + 2) + '" />';
                            $('.waypointContent').append(html);
                            $('.waypointContent').append(htmlHidden1);
                            $('.waypointContent').append(htmlHidden2);
                            var waypointCoordinates = [];
                            (function () {
                                var placesAutocomplete = places({
                                    appId: 'plI6T90SY476',
                                    apiKey: 'e7e9bed37c9bc906cfe8f5d15f03b745',
                                    container: document.querySelector('#' + waypoint)
                                });


                                var $address = document.querySelector('#' + waypoint)
                                placesAutocomplete.on('change', function (e) {
                                    waypointCoordinates = [e.suggestion.latlng.lng, e.suggestion.latlng.lat];
                                });

                                placesAutocomplete.on('clear', function () {
                                    $address.textContent = 'none';
                                });

                            })();


                            document.getElementById(waypoint).addEventListener('change', function () {
                                map.flyTo({
                                    center: waypointCoordinates,
                                    zoom: 12.5
                                });
                                waypoints.push({
                                    name: waypoint,
                                    coordinates: waypointCoordinates
                                });
                                document.getElementById('point' + (pointsCount + 1)).value = document.getElementById('point' + (pointsCount)).value;
                                document.getElementById('point' + (pointsCount + 2)).value = waypointCoordinates;
                                waypointCount++;
                                pointsCount += 2;
                                check = true;
                                getRoute();
                            });
                        }
                    }
                    else {
                        alert("Для добавления новой точки необходимо заполнить данные предыдущей");
                    }
                }


    </script>

        <script>
            var currentTab = 0; // Current tab is set to be the first tab (0)
            showTab(currentTab); // Display the current tab

            function showTab(n) {
                // This function will display the specified tab of the form ...
                var x = document.getElementsByClassName("tab");
                x[n].style.display = "block";
                // ... and fix the Previous/Next buttons:
                if (n == 0) {
                    document.getElementById("prevBtn").style.display = "none";
                    document.getElementById("sumbitBut").style.display = "none";
                    document.getElementById("nextBtn").style.display = "inline";
                } else {
                    document.getElementById("prevBtn").style.display = "inline";
                }
                if (n == (x.length - 1)) {
                    document.getElementById("nextBtn").innerHTML = "Ввод";
                    document.getElementById("nextBtn").style.display = "none";
                    document.getElementById("sumbitBut").style.display = "inline";
                } else {
                    document.getElementById("nextBtn").innerHTML = "Далее";
                    document.getElementById("sumbitBut").style.display = "none";
                }
                // ... and run a function that displays the correct step indicator:
            }

            function nextPrev(n) {
                // This function will figure out which tab to display
                var x = document.getElementsByClassName("tab");
                // Exit the function if any field in the current tab is invalid:



                //if (n == 1 /*&& !validateForm()*/) return false;



                // Hide the current tab:
                x[currentTab].style.display = "none";
                // Increase or decrease the current tab by 1:
                currentTab = currentTab + n;
                // if you have reached the end of the form... :
                if (currentTab >= x.length) {
                    //...the form gets submitted:
                    document.getElementById("regForm").submit();
                    return false;
                }
                // Otherwise, display the correct tab:
                showTab(currentTab);
            }

            function validateForm() {
                // This function deals with validation of the form fields
                var x, y, i, valid = true;
                x = document.getElementsByClassName("tab");
                y = x[currentTab].getElementsByTagName("input");
                // A loop that checks every input field in the current tab:
                for (i = 0; i < y.length; i++) {
                    // If a field is empty...
                    if (y[i].value == "") {
                        // add an "invalid" class to the field:
                        y[i].className += " invalid";
                        // and set the current valid status to false:
                        valid = false;
                    }
                }
                // If the valid status is true, mark the step as finished and valid:
                if (valid) {
                    document.getElementsByClassName("step")[currentTab].className += " finish";
                }
                return valid; // return the valid status
            }
        </script>

</body>